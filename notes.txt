NOTES

Codebase Reference:
https://github.com/peterellisjones/Checkmate


- Move generation
https://peterellisjones.com/posts/generating-legal-chess-moves-efficiently/
https://peterellisjones.tumblr.com/post/39938456375/chess-engine-part-i-choosing-internal-data
https://peterellisjones.tumblr.com/post/41238723473/chess-engine-part-ii-move-encoding-and-move
https://code.google.com/archive/p/javalin-chess/wikis/README.wiki
https://chess.stackexchange.com/questions/37309/move-generation-for-sliding-pieces-and-hyperbola-quintessence
https://www.chessprogramming.org/Hyperbola_Quintessence

- Move search (Algos, position evaluation, hashing, move ordering, ...)
https://www.josherv.in/2022/12/17/chess-2/: Writing a Chess Engine: Move Selection
https://www.cs.unm.edu/~aaron/downloads/qian_search.pdf: Game Tree Searching and pruning
https://web.archive.org/web/20060107101829/http://chess.verhelst.org/1997/03/10/search/: Chess Tree Search

  - Algos
    - minimax
    https://www.chessprogramming.org/Minimax

    - negamax
    https://www.chessprogramming.org/Negamax

    - alpha-beta
    https://www.chessprogramming.org/Alpha-Beta
    http://web.archive.org/web/20080216030608/http://www.seanet.com/~brucemo/topics/alphabeta.htm
    https://mediocrechess.blogspot.com/2006/12/guide-alpha-beta-search.html?m=1
    https://ntietz.com/blog/alpha-beta-pruning/

  - Position evaluation
  https://www.chessprogramming.org/Evaluation

  - Move ordering
  https://sites.google.com/site/tscpchess/move-ordering

  - Move scoring
    - MVV LVA
    https://rustic-chess.org/search/ordering/mvv_lva.html

  - Transposition table, hashing, zobrist
  https://www.ics.uci.edu/~eppstein/180a/970424.html: Hashing and Move Ordering
  http://web.archive.org/web/20070809015843/http://www.seanet.com/~brucemo/topics/hashing.htm
  http://mediocrechess.blogspot.com/2007/01/guide-zobrist-keys.html?m=1


- Misc blogs on game engines
http://web.archive.org/web/20080216031116/http://www.seanet.com/~brucemo/topics/topics.htm
https://www.dailychess.com/rival/programming/index.php
https://healeycodes.com/building-my-own-chess-engine
http://www.fierz.ch/strategy1.htm
http://www.fierz.ch/strategy2.htm
https://mediocrechess.blogspot.com/?m=0
https://code.google.com/archive/p/javalin-chess/wikis/README.wiki
https://www.techfak.uni-bielefeld.de/~skopp/Lehre/STdKI_SS10/VL3-GamePlaying.pdf

- Engines
https://github.com/maksimKorzh/wukongJS/blob/main/wukong.js
https://github.com/nescitus/cpw-engine
https://crates.io/crates/littlewing
https://github.com/KierenP/Halogen/tree/master

- Chess engine communication protocols
  - Winboard/Xboard
  http://www.open-aurec.com/wbforum/WinBoard/engine-intf.html
  http://hgm.nubati.net/CECP.html
  https://stackoverflow.com/questions/22060432/how-to-make-a-simple-protocol-to-winboard
  https://www.youtube.com/watch?v=ubSDzI3ecwc
  http://www.open-aurec.com/wbforum/viewtopic.php?f=24&t=51739

  To run xboard:
  $ xboard -debug -fcp "blunder --xboard" -fd "/home/fred/src/blunder/build/dev"

- Profiling
  - perf
https://perf.wiki.kernel.org/index.php/Tutorial
# install perf
$ sudo yum install perf
  - FlameGraph
https://github.com/brendangregg/FlameGraph
# install FlameGraph
$ cd ~/src
$ git clone https://github.com/brendangregg/FlameGraph

To run profiling
$ cmake --preset=dev-prof
$ cmake --build --preset=dev-prof
$ cmake --build --preset=dev-prof target=profile

That will generate a profiling report (perf-report.out) and flamegraph (perf.svg) in blunder/build/profile

- Mate puzzles
  - wtharvey.com

- CMAKE
https://github.com/friendlyanon/cmake-init

Dev notes:

TODO:
- optimize search time, based on game remaining time, and estimation of search time for next depth.
- Fix warning in Xboard.cpp


Comparing with peterellisjones / rust_move_gen
https://github.com/peterellisjones/rust_move_gen
-------------------------
U64 MoveGenerator::get_king_danger_squares(const class Board& board, const U8 side, U64 king)
  U64 MoveGenerator::bishop_targets(U64 from, U64 occupied)
    U64 MoveGenerator::bishop_attacks(U64 occ, int sq)
      return diag_attacks(occ, sq) + anti_diag_attacks(occ, sq)

fn king_danger_squares(king: BB, attacker: Side, position: &Position) -> BB
  fn bishop_attacks(from: BB, occupied: BB) -> BB
    hyperbola: fn bishop_attacks_from_sq(from: Square, occupied: BB) -> BB
    hyperbola:   file_attacks_from_sq(from, occupied) | rank_attacks_from_sq(from, occupied)

-------------------------
void MoveGenerator::add_all_moves()
  void MoveGenerator::add_slider_legal_moves(class MoveList& list,
    U64 MoveGenerator::bishop_attacks(U64 occ, int sq)
      return diag_attacks(occ, sq) + anti_diag_attacks(occ, sq);

fn legal_moves_with_preprocessing<L: MoveAdder>()
  fn slider_moves<L: MoveAdder>()
    fn bishop_attacks_from_sq(from: Square, occupied: BB) -> BB
      hyperbola: file_attacks_from_sq(from, occupied) | rank_attacks_from_sq(from, occupied)
-------------------------


pub use self::ray_hyperbola::rank_attacks_from_sq;
pub use self::ray_kogge_stone::diag_pin_rays_including_attackers;  // not used
pub use self::ray_kogge_stone::non_diag_pin_rays_including_attackers;  // not used
pub use self::ray_kogge_stone::pinned_pieces;  // not used
pub use self::ray_kogge_stone::{bishop_attacks, rook_attacks};
pub use self::ray_kogge_stone::{pin_ray_diag, pin_ray_non_diag};
. target_feature = bmi2
pub use self::ray_bmi2::{bishop_attacks_from_sq, rook_attacks_from_sq};
. target_feature != bmi2
pub use self::ray_magic::{bishop_attacks_from_sq, rook_attacks_from_sq};






